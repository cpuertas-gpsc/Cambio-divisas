import streamlit as st
import base64

# üîπ Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n USD/EUR ‚Äì Grupo Procourval",
    layout="wide",
    initial_sidebar_state="expanded"
)

# üîπ Estilo visual corporativo
def set_background(image_path):
    try:
        with open(image_path, "rb") as image_file:
            encoded = base64.b64encode(image_file.read()).decode()
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url("data:image/jpeg;base64,{encoded}");
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
                background-attachment: fixed;
            }}
            .block-container {{
                background-color: rgba(255, 255, 255, 0.85);
                padding: 2rem;
                border-radius: 10px;
            }}
            h1, h2, h3 {{
                color: #003366;
            }}
            .metric-label {{
                font-weight: bold;
                color: #003366;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )
    except Exception as e:
        st.error(f"No se pudo cargar el fondo: {e}")

set_background("fondo.jpg")  # Aseg√∫rate de que exista en tu carpeta

# üîπ Logo institucional
try:
    st.image("logo_completo.jpg", width=900)
except Exception as e:
    st.warning(f"‚ö†Ô∏è Error al cargar el logo: {e}")

# üîπ Encabezado
st.title("Predicci√≥n del tipo de cambio USD/EUR")
st.subheader("An√°lisis y predicciones basadas en datos hist√≥ricos y modelos avanzados de machine learning.")
st.markdown("Grupo Procourval ‚Äì Departamento de Datos")

import requests
import pandas as pd
import time
from datetime import datetime

# üîπ Consulta del tipo de cambio USD ‚Üí EUR desde FRED
def get_usdeur_real():
    try:
        start = time.time()
        response = requests.get("https://api.stlouisfed.org/fred/series/observations", params={
            "series_id": "DEXUSEU",
            "api_key": "437ffc22620f0fe3615350b1764f112b",
            "file_type": "json"
        })
        latency = round((time.time() - start) * 1000, 2)
        response.raise_for_status()
        data = response.json()

        df = pd.DataFrame(data["observations"])
        df["date"] = pd.to_datetime(df["date"])
        df["value"] = pd.to_numeric(df["value"], errors="coerce")
        df.dropna(subset=["value"], inplace=True)
        latest = df.sort_values("date", ascending=False).iloc[0]

        return {
            "valor": round(latest["value"], 4),
            "fecha": latest["date"].strftime("%Y-%m-%d"),
            "latencia": latency,
            "estado": "‚úÖ FRED OK"
        }
    except Exception as e:
        return {
            "valor": None,
            "fecha": None,
            "latencia": None,
            "estado": f"‚ùå Error FRED: {e}"
        }
# üîπ Mostrar KPIs visuales
info = get_usdeur_real()
st.markdown("### Valor real del d√≥lar frente al euro (USD ‚Üí EUR)")
col1, col2, col3, col4 = st.columns(4)
col1.metric("1 USD =", f"{info['valor']} EUR" if info['valor'] else "N/A")
col2.metric("‚è± Latencia", f"{info['latencia']} ms" if info['latencia'] else "N/A")
col3.markdown(f"**üìÖ Fecha:** {info['fecha']}")
col4.markdown(f"**üîÑ Estado API:** {info['estado']}")

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.metrics import mean_absolute_error, mean_squared_error

# üîπ Cargar archivo CSV generado desde Jupyter
df = pd.read_csv("comparativa_dxy_modelo.csv", parse_dates=["Fecha"])
df = df.set_index("Fecha")

# üîπ Extraer series
y_real = df["DXY real"]
y_pred = df["DXY estimado"]

# üîπ Calcular m√©tricas clave
mae = mean_absolute_error(y_real, y_pred)
rmse = np.sqrt(mean_squared_error(y_real, y_pred))
mape = np.mean(np.abs((y_real - y_pred) / y_real)) * 100
bias = np.mean(y_pred - y_real)
direccion_correcta = np.mean(np.sign(np.diff(y_real)) == np.sign(np.diff(y_pred))) * 100

# üîπ Resumen ejecutivo para audiencia no t√©cnica
st.markdown("###  Resumen del rendimiento del modelo")
st.markdown(f"""
Durante el periodo analizado, el modelo logr√≥ una precisi√≥n notable al estimar el valor del d√≥lar frente a una cesta de divisas (√≠ndice DXY).  
- El **error medio absoluto** fue de **{mae:.2f} puntos**, lo que indica una desviaci√≥n promedio muy baja.  
- El **MAPE**, que mide el error relativo, se situ√≥ en **{mape:.2f}%**, lo que es aceptable para entornos financieros.  
- El modelo acert√≥ la **direcci√≥n del movimiento** del d√≥lar en un **{direccion_correcta:.2f}%** de los d√≠as, lo que lo hace √∫til para decisiones t√°cticas.  
- La **confianza media** del modelo fue de **{df['Confianza'].mean():.2f}**, basada en la dispersi√≥n de Prophet.

En resumen, el modelo muestra un comportamiento estable y fiable, especialmente en escenarios neutros.
""")

# üîπ Gr√°fico Plotly comparativo
fig = go.Figure()

fig.add_trace(go.Scatter(
    x=df.index, y=y_real,
    mode='lines', name='DXY real',
    line=dict(color='black', width=2)
))

fig.add_trace(go.Scatter(
    x=df.index, y=y_pred,
    mode='lines', name='DXY estimado (escenario neutro)',
    line=dict(color='#003366', dash='dash')
))

fig.update_layout(
    title=" Evoluci√≥n del d√≥lar ‚Äì Real vs Modelo",
    xaxis_title="Fecha",
    yaxis_title="√çndice DXY",
    legend=dict(x=0, y=1),
    margin=dict(l=40, r=40, t=60, b=60),
    height=500,
    annotations=[
        dict(
            text="Esta gr√°fica representa el escenario neutro del modelo. En versiones anteriores se mostraban tambi√©n los escenarios positivo y negativo, que encapsulaban el valor estimado del d√≥lar dentro de un rango de confianza.",
            xref="paper", yref="paper",
            x=0, y=-0.3, showarrow=False,
            font=dict(size=12, color="gray")
        )
    ]
)

st.plotly_chart(fig, use_container_width=True)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# üîπ Cargar archivo Excel con datos de julio
df = pd.read_excel("comparativa_julio_2025.xlsx", parse_dates=["Fecha"])
df = df.set_index("Fecha")

# üîπ M√©tricas de rendimiento
total = len(df)
aciertos = df["Acierto"].value_counts().get("‚úîÔ∏è", 0)
errores = df["Acierto"].value_counts().get("‚ùå", 0)
confianza_media = df["Confianza"].mean()
porcentaje_acierto = (aciertos / total) * 100
porcentaje_error = (errores / total) * 100

# üîπ Evaluaci√≥n anal√≠tica con explicaci√≥n clara
st.markdown("###  Diagn√≥stico financiero del modelo ‚Äì Julio 2025")

if porcentaje_acierto >= 80 and confianza_media >= 0.15:
    st.success("‚úÖ Alta fiabilidad: el modelo fue preciso y estable.")
    st.markdown("""
    El diagn√≥stico se basa en dos par√°metros clave:
    - **Porcentaje de acierto**: el modelo acert√≥ en m√°s del 80‚ÄØ% de los d√≠as, lo que indica una excelente capacidad para anticipar correctamente la direcci√≥n del d√≥lar.
    - **Confianza media**: con un valor superior a 0.15, el modelo mostr√≥ estabilidad en sus estimaciones, lo que refuerza su utilidad en entornos financieros.

    Este rendimiento sugiere que el modelo puede utilizarse para tomar decisiones operativas con seguridad, especialmente en contextos de riesgo controlado.
    """)
elif porcentaje_acierto >= 65:
    st.warning("‚ö†Ô∏è Fiabilidad moderada: √∫til con supervisi√≥n.")
    st.markdown("""
    Aunque el modelo acert√≥ entre el 65‚ÄØ% y el 80‚ÄØ% de las veces, lo que indica una fiabilidad aceptable, no alcanza niveles √≥ptimos.
    La confianza media es razonable, pero se recomienda que las decisiones basadas en este modelo sean revisadas por un analista, especialmente en d√≠as con alta volatilidad o eventos macroecon√≥micos relevantes.
    """)
else:
    st.error("‚ùå Fiabilidad baja: el modelo requiere revisi√≥n.")
    st.markdown("""
    El porcentaje de acierto fue inferior al 65‚ÄØ%, lo que indica que el modelo no logr√≥ anticipar correctamente la mayor√≠a de los movimientos del d√≥lar.
    Adem√°s, si la confianza media es baja, las predicciones pueden haber sido inconsistentes o err√°ticas.
    En este caso, se recomienda revisar el modelo, ajustar sus par√°metros, o incorporar nuevas variables que mejoren su capacidad predictiva.
    """)

# üîπ Gr√°fico refinado de aciertos vs errores
st.markdown("###  Distribuci√≥n de aciertos y errores en julio")

fig, ax = plt.subplots(figsize=(5.5, 3.5))
colores = ["#0072B5", "#D55E00"]  # Azul corporativo y rojo financiero
barras = ax.bar(["‚úîÔ∏è Aciertos", "‚ùå Errores"], [aciertos, errores], color=colores, width=0.5)

# A√±adir etiquetas encima de cada barra
for barra in barras:
    altura = barra.get_height()
    ax.text(barra.get_x() + barra.get_width() / 2, altura + 0.5, f"{int(altura)}", ha='center', va='bottom', fontsize=10)

ax.set_ylabel("N√∫mero de d√≠as", fontsize=9)
ax.set_title("Predicciones correctas vs incorrectas ‚Äì Julio 2025", fontsize=10, color="#003366")
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.grid(axis="y", linestyle="--", alpha=0.3)
st.pyplot(fig)
st.markdown("### ¬øQu√© entendemos por acierto y error en este modelo?")
st.markdown("""
En este contexto, un **acierto** significa que el modelo predijo correctamente la direcci√≥n del movimiento del d√≥lar respecto al d√≠a anterior.  
Es decir, si el d√≥lar subi√≥ y el modelo anticip√≥ una subida, o si baj√≥ y el modelo anticip√≥ una bajada, se considera un acierto.

Por el contrario, un **error** ocurre cuando el modelo predijo una direcci√≥n contraria a la que realmente sucedi√≥.  
Por ejemplo, si el modelo anticip√≥ una subida pero el d√≥lar baj√≥, eso se contabiliza como error.

---

###  Par√°metros que se interpretan para cada caso:

- **DXY real**: es el valor real del √≠ndice del d√≥lar en ese d√≠a, calculado frente a una cesta de divisas.
- **Variaci√≥n real**: indica si el d√≥lar subi√≥ o baj√≥ respecto al d√≠a anterior.
- **Predicci√≥n modelo**: es la estimaci√≥n que hizo el modelo sobre el comportamiento del d√≥lar.
- **Acierto**: se marca como ‚úîÔ∏è si la predicci√≥n coincidi√≥ con la direcci√≥n real, y ‚ùå si no lo hizo.
- **Confianza**: representa la seguridad del modelo en su predicci√≥n, calculada a partir de la dispersi√≥n del intervalo de Prophet. Cuanto mayor sea la confianza, m√°s estable es la estimaci√≥n.

Este an√°lisis no mide si el valor exacto fue id√©ntico, sino si el modelo fue capaz de anticipar correctamente la **tendencia** del mercado, lo cual es clave en entornos financieros donde la direcci√≥n del movimiento es m√°s relevante que el valor absoluto.
""")

import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# üîπ Cargar predicciones futuras
df_pred = pd.read_csv("predicciones_2025_2029.csv", parse_dates=["Fecha"])
df_pred = df_pred.set_index("Fecha")

# üîπ Convertir √≠ndice a lista de fechas disponibles
fechas_disponibles = df_pred.index.to_list()

# üîπ Selector de fecha
st.markdown("###  Selecciona una fecha para consultar la predicci√≥n del d√≥lar")
fecha_seleccionada = st.date_input(
    "Fecha de predicci√≥n",
    value=fechas_disponibles[0],
    min_value=fechas_disponibles[0],
    max_value=fechas_disponibles[-1]
)

# üîπ Convertir fecha seleccionada a Timestamp
fecha_seleccionada = pd.to_datetime(fecha_seleccionada)

# üîπ Verificar si hay predicci√≥n para esa fecha
if fecha_seleccionada not in df_pred.index:
    st.warning("‚ö†Ô∏è No hay predicci√≥n disponible para esa fecha. Intenta con un d√≠a laborable.")
else:
    fila = df_pred.loc[fecha_seleccionada]
    valor_estimado = fila["DXY estimado"]
    inferior = fila["yhat_lower"]
    superior = fila["yhat_upper"]
    confianza = fila["Confianza"]

    # üîπ Mostrar m√©tricas
    st.markdown(f"### Predicci√≥n para {fecha_seleccionada.strftime('%d/%m/%Y')}")
    col1, col2, col3 = st.columns(3)
    col1.metric("Valor estimado (DXY)", f"{valor_estimado:.2f}")
    col2.metric("Rango de confianza", f"{inferior:.2f} ‚Äì {superior:.2f}")
    col3.metric("Confianza del modelo", f"{confianza:.2f}")

    # üîπ Gr√°fico interactivo con Plotly
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=[fecha_seleccionada], y=[valor_estimado],
        mode='markers', name='Estimaci√≥n central',
        marker=dict(color="#003366", size=12)
    ))
    fig.add_trace(go.Scatter(
        x=[fecha_seleccionada, fecha_seleccionada],
        y=[inferior, superior],
        mode='lines', name='Intervalo de confianza',
        line=dict(color='gray', width=2, dash='dot')
    ))
    fig.update_layout(
        title="Estimaci√≥n del d√≥lar con intervalo de confianza",
        xaxis_title="Fecha",
        yaxis_title="√çndice DXY",
        height=400,
        showlegend=True,
        annotations=[
            dict(
                text="Esta estimaci√≥n representa el escenario neutro del modelo. En versiones anteriores se mostraban tambi√©n los escenarios positivo y negativo, que encapsulaban el valor del d√≥lar dentro de un rango de confianza.",
                xref="paper", yref="paper",
                x=0, y=-0.3, showarrow=False,
                font=dict(size=12, color="gray")
            )
        ]
    )
    st.plotly_chart(fig, use_container_width=True)

    # üîπ Explicaci√≥n para audiencia no t√©cnica
    st.markdown("### ¬øC√≥mo interpretar esta predicci√≥n?")
    st.markdown("""
    Esta estimaci√≥n se basa en un modelo estad√≠stico que incorpora variables macroecon√≥micas como:
    - **VIX**: √≠ndice de volatilidad del mercado
    - **Inflaci√≥n en EE.UU.**
    - **Tasa de inter√©s de la Reserva Federal

    El modelo calcula un valor central para el d√≥lar (DXY) y un **rango de confianza** que representa la posible variaci√≥n esperada.  
    Cuanto m√°s estrecho sea ese rango, mayor es la **confianza** del modelo en su predicci√≥n.  
    Esta herramienta permite anticipar el comportamiento del d√≥lar en fechas futuras, lo que puede ser √∫til para planificaci√≥n financiera, cobertura de riesgo o toma de decisiones estrat√©gicas.
    """)
import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# üîπ Cargar archivo con escenarios
df_escenarios = pd.read_csv("escenarios_dxy_2025_2029.csv", parse_dates=["Fecha"])
df_escenarios = df_escenarios.set_index("Fecha")

# üîπ Selector de fecha
st.markdown("###  Simulaci√≥n de escenarios para el d√≥lar")
fecha_simulada = st.date_input(
    "Selecciona una fecha",
    value=df_escenarios.index[0],
    min_value=df_escenarios.index.min(),
    max_value=df_escenarios.index.max()
)

fecha_simulada = pd.to_datetime(fecha_simulada)

if fecha_simulada not in df_escenarios.index:
    st.warning("‚ö†Ô∏è No hay datos disponibles para esa fecha.")
else:
    fila = df_escenarios.loc[fecha_simulada]
    dxy_neutro = fila["DXY_neutro"]
    dxy_positivo = fila["DXY_positivo"]
    dxy_negativo = fila["DXY_negativo"]
    inferior = fila["yhat_lower"]
    superior = fila["yhat_upper"]
    confianza = fila["Confianza"]

    # üîπ Mostrar m√©tricas
    st.markdown(f"### Predicciones para {fecha_simulada.strftime('%d/%m/%Y')}")
    col1, col2, col3 = st.columns(3)
    col1.metric("Escenario neutro", f"{dxy_neutro:.2f}")
    col2.metric("Escenario positivo", f"{dxy_positivo:.2f}")
    col3.metric("Escenario negativo", f"{dxy_negativo:.2f}")

    # üîπ Gr√°fico interactivo
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=[fecha_simulada], y=[dxy_neutro],
        mode='markers', name='Neutro',
        marker=dict(color="#003366", size=12)
    ))
    fig.add_trace(go.Scatter(
        x=[fecha_simulada], y=[dxy_positivo],
        mode='markers', name='Positivo',
        marker=dict(color="green", size=12)
    ))
    fig.add_trace(go.Scatter(
        x=[fecha_simulada], y=[dxy_negativo],
        mode='markers', name='Negativo',
        marker=dict(color="red", size=12)
    ))
    fig.add_trace(go.Scatter(
        x=[fecha_simulada, fecha_simulada],
        y=[inferior, superior],
        mode='lines', name='Intervalo de confianza (neutro)',
        line=dict(color='gray', width=2, dash='dot')
    ))
    fig.update_layout(
        title="Simulaci√≥n de escenarios del d√≥lar",
        xaxis_title="Fecha",
        yaxis_title="√çndice DXY",
        height=450,
        showlegend=True,
        annotations=[
            dict(
                text="El escenario neutro representa condiciones macroecon√≥micas estables. Los escenarios positivo y negativo encapsulan el valor del d√≥lar bajo condiciones favorables o adversas, respectivamente.",
                xref="paper", yref="paper",
                x=0, y=-0.3, showarrow=False,
                font=dict(size=12, color="gray")
            )
        ]
    )
    st.plotly_chart(fig, use_container_width=True)

    # üîπ Explicaci√≥n para audiencia no t√©cnica
    st.markdown("###  ¬øQu√© representan estos escenarios?")
    st.markdown("""
    - **Escenario neutro**: se basa en condiciones macroecon√≥micas promedio, sin shocks ni cambios bruscos.
    - **Escenario positivo**: simula un entorno favorable, con baja volatilidad, inflaci√≥n controlada y pol√≠tica monetaria estable.
    - **Escenario negativo**: representa un contexto adverso, con alta volatilidad, inflaci√≥n elevada o subidas agresivas de tipos.

    Estos escenarios permiten anticipar c√≥mo podr√≠a comportarse el d√≥lar en distintos contextos, lo que es √∫til para an√°lisis de riesgo, cobertura financiera y toma de decisiones estrat√©gicas.
    """)
import streamlit as st
import pandas as pd

# üîπ Cargar predicciones futuras
df_pred = pd.read_csv("predicciones_2025_2029.csv", parse_dates=["Fecha"])
df_pred = df_pred.set_index("Fecha")

# üîπ Selector de rango de fechas
st.markdown("### Generar informe de predicci√≥n")
fecha_inicio = st.date_input("Fecha inicial", value=pd.to_datetime("2025-09-10"))
fecha_fin = st.date_input("Fecha final", value=pd.to_datetime("2025-09-18"))

# üîπ Convertir fechas
fecha_inicio = pd.to_datetime(fecha_inicio)
fecha_fin = pd.to_datetime(fecha_fin)

# üîπ Filtrar datos
df_rango = df_pred.loc[(df_pred.index >= fecha_inicio) & (df_pred.index <= fecha_fin)]

if df_rango.empty:
    st.warning("‚ö†Ô∏è No hay predicciones disponibles en ese rango.")
else:
    # üîπ Mostrar tabla resumen
    st.markdown("###  Informe de predicci√≥n")
    st.dataframe(df_rango.style.format({
        "DXY estimado": "{:.2f}",
        "yhat_lower": "{:.2f}",
        "yhat_upper": "{:.2f}",
        "Dispersi√≥n": "{:.2f}",
        "Confianza": "{:.2f}"
    }))

    # üîπ M√©tricas agregadas
    st.markdown("###  M√©tricas del periodo seleccionado")
    col1, col2, col3 = st.columns(3)
    col1.metric("Valor medio estimado", f"{df_rango['DXY estimado'].mean():.2f}")
    col2.metric("Confianza media", f"{df_rango['Confianza'].mean():.2f}")
    col3.metric("Dispersi√≥n media", f"{df_rango['Dispersi√≥n'].mean():.2f}")

    # üîπ Explicaci√≥n para audiencia no t√©cnica
    st.markdown("###  ¬øC√≥mo interpretar este informe?")
    st.markdown("""
    Este informe muestra las estimaciones del valor del d√≥lar (DXY) para el periodo seleccionado.  
    - El **valor medio estimado** representa la tendencia central del d√≥lar en ese intervalo.  
    - La **confianza media** indica la estabilidad del modelo: valores altos sugieren predicciones m√°s fiables.  
    - La **dispersi√≥n media** refleja la amplitud del rango de incertidumbre: cuanto menor, m√°s precisa es la estimaci√≥n.

    Este tipo de informe puede utilizarse para planificaci√≥n financiera, an√°lisis de riesgo o validaci√≥n de escenarios futuros.
    """)
import streamlit as st
import pandas as pd

# üîπ Cargar predicciones futuras
df_pred = pd.read_csv("predicciones_2025_2029.csv", parse_dates=["Fecha"])
df_pred = df_pred.set_index("Fecha")

# üîπ Calcular variaci√≥n diaria del valor estimado
df_pred["Variaci√≥n estimada"] = df_pred["DXY estimado"].diff()

# üîπ Definir umbrales de alerta
umbral_dispersion = df_pred["Dispersi√≥n"].mean() + df_pred["Dispersi√≥n"].std()
umbral_variacion = df_pred["Variaci√≥n estimada"].std() * 2

# üîπ Detectar anomal√≠as
df_alertas = df_pred[
    (df_pred["Dispersi√≥n"] > umbral_dispersion) |
    (df_pred["Variaci√≥n estimada"].abs() > umbral_variacion)
]

# üîπ Mostrar resumen
st.markdown("### D√≠as con alerta en predicci√≥n del d√≥lar")
st.markdown(f"""
Se han detectado **{len(df_alertas)} d√≠as** en los que el modelo muestra se√±ales de baja fiabilidad o comportamiento an√≥malo.  
Estos d√≠as pueden requerir revisi√≥n adicional por parte del equipo anal√≠tico.
""")

# üîπ Funci√≥n de estilo para resaltar en rojo
def resaltar_alerta(fila):
    color = "background-color: #ffcccc"  # Rojo claro
    return [color] * len(fila)

# üîπ Mostrar tabla con estilo
st.dataframe(
    df_alertas[[
        "DXY estimado", "yhat_lower", "yhat_upper", "Dispersi√≥n", "Confianza", "Variaci√≥n estimada"
    ]].style
    .format({
        "DXY estimado": "{:.2f}",
        "yhat_lower": "{:.2f}",
        "yhat_upper": "{:.2f}",
        "Dispersi√≥n": "{:.2f}",
        "Confianza": "{:.2f}",
        "Variaci√≥n estimada": "{:+.2f}"
    })
    .apply(resaltar_alerta, axis=1)
)

# üîπ Explicaci√≥n para audiencia no t√©cnica
st.markdown("###  ¬øQu√© significa una alerta?")
st.markdown("""
Una alerta se genera cuando el modelo muestra alguno de estos comportamientos:
- **Alta dispersi√≥n**: el rango entre la predicci√≥n inferior y superior es demasiado amplio, lo que indica baja confianza.
- **Variaci√≥n abrupta**: el valor estimado del d√≥lar cambia bruscamente respecto al d√≠a anterior, lo que puede reflejar sensibilidad excesiva o ruido en los datos.

Las filas resaltadas en rojo indican d√≠as que requieren especial atenci√≥n.  
No significa que el modelo est√© fallando, pero s√≠ que conviene revisar el contexto econ√≥mico de esos d√≠as antes de tomar decisiones basadas en esas predicciones.
""")
import streamlit as st

st.markdown("##  Metodolog√≠a del modelo de predicci√≥n USD/EUR")

st.markdown("""
Este modelo ha sido desarrollado por el departamento de datos del **Grupo Procurval** con el objetivo de anticipar el comportamiento del d√≥lar frente al euro (USD/EUR) utilizando el √≠ndice DXY como referencia.

###  Datos utilizados
- **Hist√≥rico del √≠ndice DXY** desde 2010 hasta la actualidad
- **Variables macroecon√≥micas** como:
  - √çndice de volatilidad (**VIX**)
  - Inflaci√≥n en EE.UU. (**Inflacion_USA**)
  - Tasa de inter√©s de la Reserva Federal (**Tasa_FED**)
- Datos extra√≠dos de fuentes oficiales como **FRED**, **Yahoo Finance** y bases internas del grupo

### T√©cnicas aplicadas
- **Modelado temporal con Prophet** para estimar el valor futuro del d√≥lar
- **Clasificaci√≥n con Random Forest** para evaluar decisiones operativas
- **Simulaci√≥n de escenarios** (positivo, negativo, neutro) para an√°lisis estrat√©gico
- **Evaluaci√≥n con m√©tricas financieras** como MAE, RMSE, MAPE y dispersi√≥n

### Limitaciones del modelo
- Las predicciones se basan en condiciones macroecon√≥micas estimadas; eventos inesperados (geopol√≠ticos, financieros) pueden alterar los resultados
- El modelo no sustituye el juicio experto, sino que lo complementa
- La confianza del modelo var√≠a seg√∫n la dispersi√≥n del intervalo de predicci√≥n

###  Recomendaciones de uso
- Utilizar el modelo como **herramienta de apoyo** para decisiones t√°cticas y estrat√©gicas
- Revisar los d√≠as con **alerta** antes de ejecutar decisiones sensibles
- Consultar los escenarios alternativos para evaluar riesgos y oportunidades

---

## Cierre del proyecto

Este proyecto ha sido dise√±ado para ofrecer una soluci√≥n predictiva robusta, transparente y adaptable al entorno actual.  
El modelo permite anticipar el comportamiento del d√≥lar con fiabilidad y flexibilidad.

**Cristina Puertas**
**Departamento de Data ‚Äì Grupo Procourval**
            cpuertas@gpsc.es
---

###  Gracias por utilizar esta app

Esta aplicaci√≥n est√° en constante evoluci√≥n. Si tienes sugerencias, mejoras o nuevas variables que se necesiten incorporar dispone de un repositorio en gitHub para gestionar incidencias y propuestas de mejora.
https://github.com/cpuertas-gpsc/Cambio-divisas
            **Grupo Procourval ‚Äì Departamento de Datos**
""")
